from kivy.config import Config
Config.set('input', 'mouse', 'mouse,disable_multitouch')
from kivy.core.window import Window
Window.size = (420, 860)

from kivy.app import App
from kivy.clock import Clock
from kivy.uix.screenmanager import ScreenManager, Screen, NoTransition
from kivy.lang import Builder
from kivy.properties import StringProperty, BooleanProperty, ListProperty
from kivy.uix.widget import Widget

from studysaga.services.notifications import notify_info
from studysaga.services.gacha import GachaMachine
from studysaga.services.pomodoro import PomodoroController
import sqlite3, os, time, datetime, json, math, random

# Î∂àÌïÑÏöî/Ï§ëÎ≥µÏù¥ÏóàÎçò Ïä§ÌÇ§Îßà Î∞è Î°úÏª¨ DB ÌÅ¥ÎûòÏä§ Ï†ïÏùò Ï†úÍ±∞
# Ïã§Ï†ú DBÎäî studysaga.dbÏùò DB ÌÅ¥ÎûòÏä§Î•º ÏÇ¨Ïö©
from studysaga.db import DB

# Ìè∞Ìä∏ ÏóÜÏù¥ÎèÑ Î≥¥Ïù¥Îäî Í∞ÑÎã®Ìïú Î≤°ÌÑ∞ ÏïÑÏù¥ÏΩò
class GameIcon(Widget):
    kind = StringProperty("hero")  # hero, tree, crystal, scroll, tome, cape, pouch
    color = ListProperty([0.9, 0.95, 1.0, 1.0])

    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.bind(pos=lambda *_: self._redraw(),
                  size=lambda *_: self._redraw(),
                  kind=lambda *_: self._redraw(),
                  color=lambda *_: self._redraw())
        Clock.schedule_once(lambda dt: self._redraw(), 0)

    def _redraw(self):
        from kivy.graphics import Color, Line, Ellipse, Rectangle, RoundedRectangle
        self.canvas.clear()
        w, h = self.size
        x, y = self.pos
        with self.canvas:
            Color(*self.color)

            if self.kind == "hero":
                # Î®∏Î¶¨
                Ellipse(pos=(x + w*0.35, y + h*0.7), size=(w*0.3, w*0.3))
                # Î™∏ÌÜµ/Ìåî/Îã§Î¶¨
                Line(points=[x + w*0.5, y + h*0.7, x + w*0.5, y + h*0.25], width=1.5)
                Line(points=[x + w*0.5, y + h*0.55, x + w*0.3, y + h*0.45], width=1.5)
                Line(points=[x + w*0.5, y + h*0.55, x + w*0.7, y + h*0.45], width=1.5)
                Line(points=[x + w*0.5, y + h*0.25, x + w*0.35, y + h*0.05], width=1.5)
                Line(points=[x + w*0.5, y + h*0.25, x + w*0.65, y + h*0.05], width=1.5)

            elif self.kind == "tree":
                # Ï§ÑÍ∏∞
                Color(0.55, 0.33, 0.15, 1)
                Rectangle(pos=(x + w*0.43, y), size=(w*0.14, h*0.35))
                # ÏàòÍ¥Ä
                Color(0.2, 0.65, 0.35, 1)
                Ellipse(pos=(x + w*0.1, y + h*0.25), size=(w*0.8, h*0.55))
                Ellipse(pos=(x + w*0.2, y + h*0.45), size=(w*0.6, h*0.45))

            elif self.kind == "crystal":
                # Îã§Ïù¥ÏïÑÎ™¨Îìú(ÏÑ†)
                Color(0.3, 0.8, 1.0, 1)
                Line(points=[
                    x + w*0.5, y + h*0.95,
                    x + w*0.9, y + h*0.5,
                    x + w*0.5, y + h*0.05,
                    x + w*0.1, y + h*0.5,
                    x + w*0.5, y + h*0.95
                ], width=2)

            elif self.kind == "scroll":
                Color(0.95, 0.9, 0.7, 1)
                Rectangle(pos=(x + w*0.15, y + h*0.25), size=(w*0.7, h*0.5))
                Color(0.85, 0.8, 0.6, 1)
                Ellipse(pos=(x + w*0.05, y + h*0.2), size=(w*0.2, h*0.6))
                Ellipse(pos=(x + w*0.75, y + h*0.2), size=(w*0.2, h*0.6))

            elif self.kind == "tome":
                Color(0.6, 0.2, 0.2, 1)
                Rectangle(pos=(x + w*0.15, y + h*0.15), size=(w*0.7, h*0.7))
                Color(0.9, 0.85, 0.8, 1)
                Line(points=[x + w*0.5, y + h*0.15, x + w*0.5, y + h*0.85], width=2)

            elif self.kind == "cape":
                Color(0.95, 0.75, 0.2, 1)
                RoundedRectangle(pos=(x + w*0.2, y + h*0.1), size=(w*0.6, h*0.8), radius=[(0,0), (0,0), (w*0.2,w*0.2), (w*0.2,w*0.2)])

            elif self.kind == "pouch":
                Color(0.65, 0.45, 0.2, 1)
                Ellipse(pos=(x + w*0.15, y + h*0.1), size=(w*0.7, h*0.65))
                Color(0.5, 0.3, 0.12, 1)
                Line(circle=(x + w*0.5, y + h*0.7, w*0.28), width=2)

KV = r'''
#:import dp kivy.metrics.dp
#:import Factory kivy.factory.Factory
#:import NoTransition kivy.uix.screenmanager.NoTransition

<Header@BoxLayout>:
    size_hint_y: None
    height: dp(54)
    padding: dp(10), 0
    spacing: dp(8)
    canvas.before:
        Color:
            rgba: 0.1, 0.1, 0.14, 1
        Rectangle:
            pos: self.pos
            size: self.size
    Button:
        text: "‚óÄ"
        size_hint_x: None
        width: dp(48)
        opacity: 1 if app.can_go_back else 0
        disabled: not app.can_go_back
        on_release: app.go_back()
    Label:
        text: "Study Saga"
        font_size: '20sp'
        color: 1, 1, 1, 1
    Widget:
    Label:
        text: app.stats_text
        color: .9, .9, .9, 1
        font_size: '14sp'

<HomeScreen@Screen>:
    name: "home"
    BoxLayout:
        orientation: 'vertical'
        Header:
        FloatLayout:
            size_hint_y: 0.5
            canvas.before:
                Color:
                    rgba: 0.08, 0.1, 0.16, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
                Color:
                    rgba: 0.12, 0.16, 0.22, 1
                Rectangle:
                    pos: self.x, self.y
                    size: self.width, self.height * 0.35
            GameIcon:
                kind: "hero"
                size_hint: None, None
                size: dp(72), dp(96)
                pos_hint: {'center_x': 0.5, 'center_y': 0.6}
            GameIcon:
                kind: "tree"
                size_hint: None, None
                size: dp(36), dp(48)
                pos_hint: {'center_x': 0.32, 'y': 0.05}
            GameIcon:
                kind: "tree"
                size_hint: None, None
                size: dp(32), dp(44)
                pos_hint: {'center_x': 0.68, 'y': 0.06}
        BoxLayout:
            padding: dp(16)
            spacing: dp(12)
            orientation: 'vertical'
            Label:
                text: "Welcome, Adventurer!"
                font_size: '22sp'
                size_hint_y: None
                height: dp(40)
            Label:
                text: "Study minutes fuel your dungeon runs. Earn crystals & EXP, then roll gacha!"
                color: .8, .8, .85, 1
                halign: 'center'
                text_size: self.width, None
                size_hint_y: None
                height: self.texture_size[1] + dp(8)
            GridLayout:
                cols: 2
                spacing: dp(10)
                size_hint_y: None
                height: dp(220)
                Button:
                    text: "‚ñ∂ Study"
                    on_release: app.goto("study")
                Button:
                    text: "üé∞ Gacha"
                    on_release: app.goto("gacha")
                Button:
                    text: "üéí Inventory"
                    on_release: app.goto("inventory")
                Button:
                    text: "üëë Weekly Boss"
                    on_release: app.goto("boss")
            Button:
                size_hint_y: None
                height: dp(48)
                text: "‚öô Settings"
                on_release: app.goto("settings")

<InventoryScreen@Screen>:
    name: "inventory"
    BoxLayout:
        orientation: 'vertical'
        Header:
        ScrollView:
            GridLayout:
                id: inv_grid
                cols: 1
                size_hint_y: None
                height: self.minimum_height
                padding: dp(16)
                spacing: dp(8)

<StudyScreen@Screen>:
    name: "study"
    on_pre_enter: app.prepare_study_screen()
    BoxLayout:
        orientation: 'vertical'
        Header:
        BoxLayout:
            orientation: 'vertical'
            padding: dp(16)
            spacing: dp(16)
            Label:
                text: "Study Timer"
                font_size: '24sp'
                size_hint_y: None
                height: dp(40)
            Label:
                text: app.study_time_text
                font_size: '48sp'
                size_hint_y: None
                height: dp(80)
                color: 1, 1, 1, 1
            BoxLayout:
                size_hint_y: None
                height: dp(56)
                spacing: dp(12)
                Button:
                    text: "‚èØ Pause" if app.pomo_running else "‚ñ∂ Start"
                    on_release: app.toggle_pomo()
                Button:
                    text: "‚ü≤ Reset"
                    on_release: app.pomo_reset()
            Label:
                text: "Tip: Adjust durations in Settings."
                color: .8, .8, .85, 1
                size_hint_y: None
                height: dp(24)

<GachaScreen@Screen>:
    name: "gacha"
    BoxLayout:
        orientation: 'vertical'
        Header:
        BoxLayout:
            orientation: 'vertical'
            padding: dp(16)
            spacing: dp(12)
            Label:
                text: "Gacha Machine"
                font_size: '24sp'
                size_hint_y: None
                height: dp(40)
            Label:
                text: app.gacha_result
                size_hint_y: None
                height: dp(60)
            Button:
                text: "Bronze Roll (10üíé)"
                size_hint_y: None
                height: dp(50)
                on_release: app.roll_gacha('bronze')
            Button:
                text: "Silver Roll (30üíé)"
                size_hint_y: None
                height: dp(50)
                on_release: app.roll_gacha('silver')
            Button:
                text: "Gold Roll (60üíé)"
                size_hint_y: None
                height: dp(50)
                on_release: app.roll_gacha('gold')
            Widget:

<BossScreen@Screen>:
    name: "boss"
    BoxLayout:
        orientation: 'vertical'
        Header:
        BoxLayout:
            orientation: 'vertical'
            padding: dp(16)
            spacing: dp(12)
            Label:
                text: "Weekly Boss"
                font_size: '24sp'
                size_hint_y: None
                height: dp(40)
            Label:
                text: app.weekly_text
                size_hint_y: None
                height: dp(60)
            Button:
                text: "Claim Reward"
                size_hint_y: None
                height: dp(50)
                on_release: app.claim_weekly()
            Widget:

<SettingsScreen@Screen>:
    name: "settings"
    on_pre_enter: app.populate_settings_form()
    BoxLayout:
        orientation: 'vertical'
        Header:
        ScrollView:
            BoxLayout:
                orientation: 'vertical'
                padding: dp(16)
                spacing: dp(12)
                size_hint_y: None
                height: self.minimum_height
                Label:
                    text: "Settings"
                    font_size: '24sp'
                    size_hint_y: None
                    height: dp(40)
                Label:
                    text: "Configure your study timer and goals"
                    size_hint_y: None
                    height: dp(30)
                GridLayout:
                    cols: 2
                    spacing: dp(8)
                    size_hint_y: None
                    height: self.minimum_height
                    Label:
                        text: "Study minutes"
                        halign: 'left'
                        valign: 'middle'
                        text_size: self.size
                    TextInput:
                        id: in_study
                        input_filter: 'int'
                        multiline: False
                        size_hint_y: None
                        height: dp(40)
                    Label:
                        text: "Break minutes"
                        halign: 'left'
                        valign: 'middle'
                        text_size: self.size
                    TextInput:
                        id: in_break
                        input_filter: 'int'
                        multiline: False
                        size_hint_y: None
                        height: dp(40)
                    Label:
                        text: "Daily goal (min)"
                        halign: 'left'
                        valign: 'middle'
                        text_size: self.size
                    TextInput:
                        id: in_daily
                        input_filter: 'int'
                        multiline: False
                        size_hint_y: None
                        height: dp(40)
                    Label:
                        text: "Weekly goal (min)"
                        halign: 'left'
                        valign: 'middle'
                        text_size: self.size
                    TextInput:
                        id: in_weekly
                        input_filter: 'int'
                        multiline: False
                        size_hint_y: None
                        height: dp(40)
                    Label:
                        text: "Focus mode"
                        halign: 'left'
                        valign: 'middle'
                        text_size: self.size
                    Switch:
                        id: sw_focus
                        size_hint_y: None
                        height: dp(40)
                    Label:
                        text: "Background counting"
                        halign: 'left'
                        valign: 'middle'
                        text_size: self.size
                    Switch:
                        id: sw_bg
                        size_hint_y: None
                        height: dp(40)
                    Label:
                        text: "Blocked packages (comma-separated)"
                        halign: 'left'
                        valign: 'middle'
                        text_size: self.size
                    TextInput:
                        id: in_blocked
                        multiline: True
                        size_hint_y: None
                        height: dp(80)
                    Label:
                        text: "Allowed packages (comma-separated)"
                        halign: 'left'
                        valign: 'middle'
                        text_size: self.size
                    TextInput:
                        id: in_allowed
                        multiline: True
                        size_hint_y: None
                        height: dp(80)
                Button:
                    text: "Save"
                    size_hint_y: None
                    height: dp(48)
                    on_release: app.apply_settings_from_ui()

<Root>:
    HomeScreen:
    InventoryScreen:
    StudyScreen:
    GachaScreen:
    BossScreen:
    SettingsScreen:

'''

class Root(ScreenManager):
    pass

class StudySagaApp(App):
    stats_text = StringProperty("Lvl 1 ‚Ä¢ 0 EXP ‚Ä¢ 0üíé")
    weekly_text = StringProperty("0 / 600 min this week")
    gacha_result = StringProperty("")
    can_go_back = BooleanProperty(False)
    study_time_text = StringProperty("00:00")
    pomo_running = BooleanProperty(False)
    # ÏßëÏ§ë/Î∞±Í∑∏ÎùºÏö¥Îìú ÏòµÏÖò
    focus_mode_enabled = BooleanProperty(False)
    background_count = BooleanProperty(False)
    blocked_packages = ListProperty([])
    allowed_packages = ListProperty([])
    # ÌÉÄÏù¥Î®∏ ÎÇ¥Î∂Ä ÏÉÅÌÉú
    _pomo_ev = None
    _pomo_remaining = 0
    _pomo_total = 0
    _pomo_last_ts = None
    _paused_at = None
    def build(self):
        self.title = "Study Saga"
        self.db = DB("studysaga.db")
        self.player = self.db.ensure_player()
        self.gacha = GachaMachine(self.db)
        self.pomo = PomodoroController(self, self.db)
        self.update_stats()
        self.refresh_weekly()
        try:
            ui = Builder.load_string(KV)
            # KVÏóê ÏµúÏÉÅÏúÑ Ïù∏Ïä§ÌÑ¥Ïä§Í∞Ä ÏóÜÏúºÎ©¥ RootÎ•º ÏßÅÏ†ë ÏÉùÏÑ±
            if ui is None:
                ui = Root()
        except Exception as e:
            import traceback
            traceback.print_exc()
            from kivy.uix.label import Label
            # Ïò§Î•òÎ•º ÌôîÎ©¥Ïóê ÏßÅÏ†ë ÌëúÏãúÌïòÏó¨ ÏõêÏù∏ ÌååÏïÖ
            return Label(text=f"KV load error: {e}")
        return ui

    def on_start(self):
        # Ïù¥Ï†ú self.rootÍ∞Ä Î≥¥Ïû•Îê®
        if not self.root or not hasattr(self.root, "get_screen"):
            # UIÍ∞Ä Ï†ïÏÉÅÏ†ÅÏúºÎ°ú Î°úÎìúÎêòÏßÄ ÏïäÏúºÎ©¥ Ï¥àÍ∏∞Ìôî Ïä§ÌÇµ
            return
        self.refresh_inventory()
        # ÏïàÎìúÎ°úÏù¥Îìú ÌïòÎìúÏõ®Ïñ¥ Îí§Î°úÍ∞ÄÍ∏∞ Ï≤òÎ¶¨
        Window.bind(on_keyboard=self._on_keyboard)

    def on_pause(self):
        # Ïï±Ïù¥ Î∞±Í∑∏ÎùºÏö¥ÎìúÎ°ú Í∞à Îïå ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ Ï†ÄÏû•
        if self.pomo_running:
            self._paused_at = time.time()
        return True

    def on_resume(self):
        # Ïï±Ïù¥ Ìè¨Ïñ¥Í∑∏ÎùºÏö¥ÎìúÎ°ú ÎèåÏïÑÏò¨ Îïå Í≤ΩÍ≥ºÏãúÍ∞Ñ Î∞òÏòÅ(Î∞±Í∑∏ÎùºÏö¥Îìú Ïπ¥Ïö¥ÌåÖ ÏòµÏÖòÏù¥ ÏºúÏßÑ Í≤ΩÏö∞)
        if self.pomo_running and self.background_count:
            now = time.time()
            last = self._paused_at or self._pomo_last_ts
            if last:
                elapsed = int(max(0, now - last))
                if elapsed > 0:
                    self._pomo_remaining -= elapsed
                    if self._pomo_remaining <= 0:
                        self._pomo_remaining = 0
                        self.study_time_text = self._format_time(0)
                        self.pomo_pause()
                        studied = max(1, self._pomo_total // 60)
                        exp, crystals = self.reward_for_study(studied)
                        notify_info("Study complete", f"+{exp} EXP, +{crystals}üíé")
                    else:
                        self.study_time_text = self._format_time(self._pomo_remaining)
        self._paused_at = None

    def _on_keyboard(self, window, key, scancode, codepoint, modifiers):
        # 27 = Android/Îç∞Ïä§ÌÅ¨ÌÉë ESC(Back)
        if key == 27:
            self.go_back()
            return True
        return False

    def goto(self, name):
        self.root.current = name
        self.can_go_back = (name != "home")

    def go_back(self):
        if self.root.current != "home":
            self.root.current = "home"
        self.can_go_back = False

    def update_stats(self):
        self.player = self.db.get_player()
        self.stats_text = f"Lvl {self.player['level']} ‚Ä¢ {self.player['exp']} EXP ‚Ä¢ {self.player['crystals']}üíé"

    # Ï£ºÍ∞Ñ ÌÜµÍ≥Ñ/Î≥¥ÏÉÅ Î°úÏßÅ Ï†ïÎ¶¨: DBÏùò weekly_minutes / set_weekly_claimed ÏÇ¨Ïö©
    def refresh_weekly(self):
        total = self.db.weekly_minutes()
        self.weekly_text = f"{total} / {self.db.get_setting_int('weekly_goal', 600)} min this week"

    def claim_weekly(self):
        total = self.db.weekly_minutes()
        goal = self.db.get_setting_int('weekly_goal', 600)
        if total >= goal:
            if self.db.is_weekly_claimed():
                notify_info("Weekly", "Already claimed this week.")
                return
            reward = 300  # Ï£ºÍ∞Ñ Î≥¥ÏÉÅ
            # give_crystalsÍ∞Ä ÏóÜÏúºÎØÄÎ°ú add_rewardsÎ°ú ÌÅ¨Î¶¨Ïä§ÌÉàÎßå ÏßÄÍ∏â
            self.db.add_rewards(0, reward)
            self.db.set_weekly_claimed()
            self.update_stats()
            self.refresh_weekly()
            notify_info("Weekly reward claimed!", f"+{reward}üíé")
        else:
            notify_info("Too early!", "Not enough study time yet.")

    # Ïä§ÌÑ∞Îîî Î≥¥ÏÉÅ Í≥ÑÏÇ∞(Î∂ÄÏä§Ìä∏ Î∞òÏòÅ)
    def reward_for_study(self, minutes: int):
        minutes = max(0, int(minutes))
        # Í∏∞Î≥∏ Î≥¥ÏÉÅ: EXP = Î∂ÑÏàò, ÌÅ¨Î¶¨Ïä§ÌÉà = Î∂ÑÎãπ 1Í∞ú/5Î∂Ñ(ÎÇ¥Î¶º)
        base_exp = minutes
        base_crystals = minutes // 5
        boosts = self.db.get_equipped_boosts() if hasattr(self.db, "get_equipped_boosts") else {'exp_pct': 0, 'crystal_pct': 0}
        exp = int(round(base_exp * (1 + boosts.get('exp_pct', 0) / 100.0)))
        crystals = int(round(base_crystals * (1 + boosts.get('crystal_pct', 0) / 100.0)))
        # DBÏóê Ï†ÅÏö©
        self.db.add_rewards(exp, crystals)
        self.update_stats()
        return exp, crystals

    # ===== Pomodoro-like Í∞ÑÎã® ÌÉÄÏù¥Î®∏ Ï†úÏñ¥ =====
    def _format_time(self, secs: int) -> str:
        secs = max(0, int(secs))
        m, s = divmod(secs, 60)
        return f"{m:02d}:{s:02d}"

    def prepare_study_screen(self):
        # ÏÑ§Ï†ï Î∞òÏòÅ
        self.focus_mode_enabled = bool(int(self.db.get_setting('focus_mode') or 0)) if hasattr(self.db, 'get_setting') else False
        self.background_count = bool(int(self.db.get_setting('background_count') or 0)) if hasattr(self.db, 'get_setting') else False
        try:
            blocked = self.db.get_setting('blocked_packages') if hasattr(self.db, 'get_setting') else '[]'
            allowed = self.db.get_setting('allowed_packages') if hasattr(self.db, 'get_setting') else '[]'
            self.blocked_packages = json.loads(blocked) if blocked else []
            self.allowed_packages = json.loads(allowed) if allowed else []
        except Exception:
            self.blocked_packages = []
            self.allowed_packages = []

        # ÌÉÄÏù¥Î®∏ Ï¥àÍ∏∞ ÎÇ®ÏùÄ ÏãúÍ∞Ñ ÏÑ§Ï†ï Î∞è UI ÎèôÍ∏∞Ìôî
        if self._pomo_total <= 0 or self._pomo_remaining <= 0:
            mins = self.db.get_setting_int('study_minutes', 25)
            self._pomo_total = mins * 60
            self._pomo_remaining = self._pomo_total
        self.study_time_text = self._format_time(self._pomo_remaining)

    def toggle_pomo(self):
        if self.pomo_running:
            self.pomo_pause()
        else:
            self.pomo_start()

    def pomo_start(self):
        if self._pomo_ev is None:
            self._pomo_ev = Clock.schedule_interval(self._pomo_tick, 1.0)
        self.pomo_running = True
        self._pomo_last_ts = time.time()
        # ÌôîÎ©¥ Í∫ºÏßê Î∞©ÏßÄ
        try:
            Window.allow_screensaver = False
        except Exception:
            pass
        # ÏßëÏ§ë Î™®Îìú: Í∞ÄÎä•Ìïú Í≤ΩÏö∞ Ïï± ÌôîÎ©¥ Í≥†Ï†ï(ÏÇ¨Ïö©Ïûê ÎèôÏùò ÌïÑÏöî)
        if self.focus_mode_enabled:
            try:
                from kivy.utils import platform
                if platform == 'android':
                    from jnius import autoclass
                    PythonActivity = autoclass('org.kivy.android.PythonActivity')
                    activity = PythonActivity.mActivity
                    activity.startLockTask()
            except Exception:
                pass

    def pomo_pause(self):
        if self._pomo_ev is not None:
            self._pomo_ev.cancel()
            self._pomo_ev = None
        self.pomo_running = False
        # ÌôîÎ©¥ Í∫ºÏßê ÌóàÏö© Î≥µÏõê
        try:
            Window.allow_screensaver = True
        except Exception:
            pass
        # ÌôîÎ©¥ Í≥†Ï†ï Ìï¥Ï†ú ÏãúÎèÑ
        try:
            from kivy.utils import platform
            if platform == 'android':
                from jnius import autoclass
                PythonActivity = autoclass('org.kivy.android.PythonActivity')
                activity = PythonActivity.mActivity
                activity.stopLockTask()
        except Exception:
            pass

    def pomo_reset(self):
        self.pomo_pause()
        mins = self.db.get_setting_int('study_minutes', 25)
        self._pomo_total = mins * 60
        self._pomo_remaining = self._pomo_total
        self._pomo_last_ts = None
        self._paused_at = None
        self.study_time_text = self._format_time(self._pomo_remaining)

    def _pomo_tick(self, dt):
        self._pomo_remaining -= 1
        self._pomo_last_ts = time.time()
        if self._pomo_remaining <= 0:
            self.pomo_pause()
            studied = max(1, self._pomo_total // 60)
            exp, crystals = self.reward_for_study(studied)
            notify_info("Study complete", f"+{exp} EXP, +{crystals}üíé")
            self._pomo_remaining = 0
        self.study_time_text = self._format_time(self._pomo_remaining)

    # ===== Settings ÌôîÎ©¥ Ï±ÑÏö∞Í∏∞/Ï†ÅÏö© =====
    def populate_settings_form(self):
        try:
            scr = self.root.get_screen("settings")
        except Exception:
            return
        ids = scr.ids
        # Í∏∞Î≥∏ ÏãúÍ∞Ñ/Î™©Ìëú
        ids.in_study.text = str(self.db.get_setting_int('study_minutes', 25))
        ids.in_break.text = str(self.db.get_setting_int('break_minutes', 5))
        ids.in_daily.text = str(self.db.get_setting_int('daily_goal', 120))
        ids.in_weekly.text = str(self.db.get_setting_int('weekly_goal', 600))
        # ÏßëÏ§ë/Î∞±Í∑∏ÎùºÏö¥Îìú ÏòµÏÖò
        focus = bool(int(self.db.get_setting('focus_mode') or 0)) if hasattr(self.db, 'get_setting') else False
        bgcnt = bool(int(self.db.get_setting('background_count') or 0)) if hasattr(self.db, 'get_setting') else False
        if 'sw_focus' in ids:
            ids.sw_focus.active = focus
        if 'sw_bg' in ids:
            ids.sw_bg.active = bgcnt
        # Ìå®ÌÇ§ÏßÄ Î™©Î°ù
        try:
            blocked = self.db.get_setting('blocked_packages') if hasattr(self.db, 'get_setting') else '[]'
            allowed = self.db.get_setting('allowed_packages') if hasattr(self.db, 'get_setting') else '[]'
            blocked_l = json.loads(blocked) if blocked else []
            allowed_l = json.loads(allowed) if allowed else []
        except Exception:
            blocked_l, allowed_l = [], []
        if 'in_blocked' in ids:
            ids.in_blocked.text = ",".join(blocked_l)
        if 'in_allowed' in ids:
            ids.in_allowed.text = ",".join(allowed_l)

    def apply_settings_from_ui(self):
        try:
            scr = self.root.get_screen("settings")
        except Exception:
            return
        ids = scr.ids
        # Í∏∞Ï°¥ Ï†ÄÏû• Î£®Ìã¥ Ìò∏Ï∂ú
        self.save_settings(ids.in_study.text, ids.in_break.text, ids.in_daily.text, ids.in_weekly.text)
        # Ï∂îÍ∞Ä ÏòµÏÖò Ï†ÄÏû•
        def _parse_csv(text):
            return [p.strip() for p in (text or "").split(",") if p.strip()]
        focus = 1 if getattr(ids.get('sw_focus'), 'active', False) else 0
        bgcnt = 1 if getattr(ids.get('sw_bg'), 'active', False) else 0
        blocked_l = _parse_csv(getattr(ids.get('in_blocked'), 'text', ''))
        allowed_l = _parse_csv(getattr(ids.get('in_allowed'), 'text', ''))
        if hasattr(self.db, 'set_setting'):
            self.db.set_setting('focus_mode', focus)
            self.db.set_setting('background_count', bgcnt)
            self.db.set_setting('blocked_packages', json.dumps(blocked_l))
            self.db.set_setting('allowed_packages', json.dumps(allowed_l))
        # Î©îÎ™®Î¶¨ Î∞òÏòÅ
        self.focus_mode_enabled = bool(focus)
        self.background_count = bool(bgcnt)
        self.blocked_packages = blocked_l
        self.allowed_packages = allowed_l
        notify_info("Settings saved", "Focus/Background options applied.")
        self.goto("home")

    def refresh_inventory(self):
        grid = self.root.get_screen("inventory").ids.inv_grid
        grid.clear_widgets()
        items = self.db.list_inventory()

        from kivy.uix.boxlayout import BoxLayout
        from kivy.uix.label import Label
        from kivy.uix.button import Button

        for item in items:
            row = BoxLayout(size_hint_y=None, height=40, spacing=8)
            row.add_widget(Label(text=f"{item['name']} ({item['rarity']}) [{item['type']}]", halign='left'))
            btn = Button(text="Equip" if item['type'] in ('skin','boost') else "Use")

            def _equip(instance, item=item):
                self.db.equip_item(item['id'])
                self.update_stats()
                notify_info("Equipped", f"{item['name']} equipped!")

            btn.bind(on_release=_equip)
            row.add_widget(btn)
            grid.add_widget(row)

    def roll_gacha(self, tier):
        ok, item = self.gacha.roll(tier)
        if not ok:
            self.gacha_result = "Not enough crystals!"
            notify_info("Gacha", "Not enough crystals.")
            return
        self.update_stats()
        self.refresh_inventory()
        self.gacha_result = f"You got: {item['name']} ({item['rarity']})"
        notify_info("Gacha", self.gacha_result)

    def save_settings(self, study_minutes, break_minutes, daily_goal, weekly_goal):
        try:
            self.db.set_setting('study_minutes', int(study_minutes))
            self.db.set_setting('break_minutes', int(break_minutes))
            self.db.set_setting('daily_goal', int(daily_goal))
            self.db.set_setting('weekly_goal', int(weekly_goal))
            # Í∏∏Ïù¥ Ïû¨Ï†ÅÏö©
            if hasattr(self.pomo, "reload_lengths"):
                self.pomo.reload_lengths()
            else:
                self.pomo.reset()
            self.refresh_weekly()
            notify_info("Settings saved", "Your new settings have been applied.")
            self.goto("home")
        except ValueError:
            notify_info("Error", "Please enter valid numbers.")

if __name__ == "__main__":
    StudySagaApp().run()
